 {:modular (modular.system/modular-env)  ; {:profile "jetty"  :config ["demo.edn" "secrets.edn"]}
 :components
 {:config {:start (modular.config/load-config! (:config #ref [:modular]))}
  
  :exts {:start (extension/discover)}

  :timbre {:start (modular.log/timbre-config!
                   (:timbre/clj (deref (clip/ref :config))))}

  ; empty map means no users are configured, so always permissioned.
  :permission {:start (modular.permission.core/start-permissions {})}

  :clj-service {:start (clj-service.core/start-clj-services
                        (clip/ref :permission)
                        (clip/ref :exts))}

  :re-flow {:start (re-flow.core/start-clj-flow!
                    {:clj-service (clip/ref :clj-service)
                     :permission-service (clip/ref :permission)})}

;:reval {:start (reval.core/start-reval
  ;                {:config (:reval (deref (clip/ref :config)))
  ;                 :clj  (clip/ref :clj-service)
  ;                 :reval-role nil})}

  :webly {:start (webly.app.app/start-webly
                  (clip/ref :exts)
                  (deref (clip/ref :config))
                  (:profile #ref [:modular]))
          :stop (webly.app.app/stop-webly this)}

  :nrepl {:start (nrepl.server/start-server
                  :bind "0.0.0.0"
                  :port 9100
                  :middleware cider.nrepl.middleware/cider-middleware
                  :handler cider.nrepl/cider-nrepl-handler)
          :stop (.close this)}

  ;; DOCY

   ;:docy {:start (docy.core/start-docy
   ;             {:exts (clip/ref :exts)
   ;              :clj (clip/ref :clj-service)
   ;              :role nil
   ;              :namespaces (:namespaces (:docy (deref (clip/ref :config))))
   ;              :snippets (:snippets (:docy (deref (clip/ref :config))))})}

  ;; QUANTA

  ; :asset-db {:start (quanta.notebook.asset-add/add-assets)}

  :techml-render-ui {:start (quanta.viz.reval/quanta-default-reval-ui)}

  :nippy {:start (ta.db.bars.nippy/start-bardb-nippy ".data/nippy/")}

  :bar-engine {; this is the only bardb service that you need.
               ; it allows to use any imaginable bardb source.
               :start (quanta.studio.bars.engine/start-bar-engine
                       {:bardb {:nippy (clip/ref :nippy)}
                        :import {:bybit (ta.import.provider.bybit.ds/create-import-bybit)
                                 :bybit-parallel (ta.import.provider.parallel/create-import-bybit-parallel)}
                        :transform {:compress (quanta.studio.bars.transform.compress/start-transform-compress
                                               {; we just request daily and minute bars, the rest gets calculated.
                                                :Y :d
                                                :M :d
                                                :W :d
                                                  ;:d :d ; use daily from source.
                                                :h4 :m
                                                :h :m
                                                :m30 :m
                                                :m15 :m
                                                :m5 :m
                                                  ;:m :m ; use minute from source.
                                                })
                                    :shuffle (quanta.studio.bars.transform.shuffle/start-transform-shuffle)}})}

  :studio {:start (quanta.studio/start-studio
                   {:exts (clip/ref :exts)
                    :clj (clip/ref :clj-service)
                    :role nil
                    :calculate {:log-dir ".data/calc/"
                                :env  {quanta.algo.env.bars/*bar-db* (clip/ref :bar-engine)}}})}

;
  }}
